# Generated by Django 4.2.1 on 2023-08-26 15:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import wagtail.blocks
import wagtail.contrib.table_block.blocks
import wagtail.documents.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.images.models
import wagtail.models.collections
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0085_query_searchpromotion_querydailyhits"),
        ("taggit", "0005_auto_20220424_2025"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CategorySnippet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=25, verbose_name="nazwa kategorii"),
                ),
                (
                    "color",
                    models.IntegerField(
                        choices=[
                            (0, "różowy"),
                            (1, "niebieski"),
                            (2, "zielony"),
                            (3, "brązowy"),
                            (4, "pomarańczowy"),
                        ],
                        default=0,
                        verbose_name="Kolor powiązany z kategorią",
                    ),
                ),
            ],
            options={
                "verbose_name": "Kategoria",
                "verbose_name_plural": "Kategorie",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CustomImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "file",
                    wagtail.images.models.WagtailImageField(
                        height_field="height",
                        upload_to=wagtail.images.models.get_upload_to,
                        verbose_name="file",
                        width_field="width",
                    ),
                ),
                ("width", models.IntegerField(editable=False, verbose_name="width")),
                ("height", models.IntegerField(editable=False, verbose_name="height")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="created at"
                    ),
                ),
                ("focal_point_x", models.PositiveIntegerField(blank=True, null=True)),
                ("focal_point_y", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "focal_point_width",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "focal_point_height",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("file_size", models.PositiveIntegerField(editable=False, null=True)),
                (
                    "file_hash",
                    models.CharField(
                        blank=True, db_index=True, editable=False, max_length=40
                    ),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        default=wagtail.models.collections.get_root_collection_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.collection",
                        verbose_name="collection",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text=None,
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="tags",
                    ),
                ),
                (
                    "uploaded_by_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="uploaded by user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtail.images.models.ImageFileMixin,
                wagtail.search.index.Indexed,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="IndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "Strona nadrzędna",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="OrdinaryPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "content",
                    wagtail.fields.StreamField(
                        [
                            (
                                "text",
                                wagtail.blocks.RichTextBlock(
                                    blank=True,
                                    features=[
                                        "h2",
                                        "h3",
                                        "bold",
                                        "italic",
                                        "center",
                                        "right",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "link",
                                        "document-link",
                                        "image",
                                    ],
                                    label="Tekst",
                                    null=True,
                                ),
                            ),
                            (
                                "table",
                                wagtail.contrib.table_block.blocks.TableBlock(
                                    label="Tabela",
                                    required=False,
                                    table_options={
                                        "contextMenu": {
                                            "items": {
                                                "---------": {"name": "---------"},
                                                "col_left": {
                                                    "name": "Wstaw kolumnę z lewej"
                                                },
                                                "col_right": {
                                                    "name": "Wstaw kolumnę z prawej"
                                                },
                                                "redo": {"name": "Powtórz"},
                                                "remove_col": {"name": "Usuń kolumnę"},
                                                "remove_row": {"name": "Usuń wiersz"},
                                                "row_above": {
                                                    "name": "Wstaw wiersz powyżej"
                                                },
                                                "row_below": {
                                                    "name": "Wstaw wiersz poniżej"
                                                },
                                                "undo": {"name": "Cofnij"},
                                            }
                                        },
                                        "renderer": "html",
                                    },
                                    template="streams/table_block.html",
                                ),
                            ),
                            (
                                "docs",
                                wagtail.blocks.ListBlock(
                                    wagtail.documents.blocks.DocumentChooserBlock(),
                                    label="Dokumenty do pobrania",
                                    required=False,
                                    template="streams/document_link_block.html",
                                ),
                            ),
                        ],
                        blank=True,
                        null=True,
                        use_json_field=True,
                        verbose_name="Treść",
                    ),
                ),
            ],
            options={
                "verbose_name": "Podstrona - zwykła",
                "verbose_name_plural": "Zwykłe podstrony",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="SchoolYearSnippet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=25, verbose_name="rok szkolny")),
            ],
            options={
                "verbose_name": "Rok szkolny",
                "verbose_name_plural": "Rok szkolny",
            },
        ),
        migrations.CreateModel(
            name="TeachersPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "introduction",
                    models.TextField(
                        blank=True, null=True, verbose_name="Wprowadzenie"
                    ),
                ),
                (
                    "content",
                    wagtail.fields.StreamField(
                        [
                            (
                                "info",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "subject",
                                            wagtail.blocks.CharBlock(label="Nazwa"),
                                        ),
                                        (
                                            "description",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.CharBlock(),
                                                label="Imię i nazwisko",
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ],
                        blank=True,
                        null=True,
                        use_json_field=True,
                        verbose_name="Nauczyciele",
                    ),
                ),
                (
                    "alt_attr",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Opis alternatywny",
                    ),
                ),
                (
                    "additional_content",
                    wagtail.fields.StreamField(
                        [
                            (
                                "text",
                                wagtail.blocks.RichTextBlock(
                                    blank=True,
                                    features=[
                                        "bold",
                                        "italic",
                                        "center",
                                        "right",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "link",
                                    ],
                                    label="Tekst",
                                    null=True,
                                ),
                            ),
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "img",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                blank=True, label="Zdjęcie", null=True
                                            ),
                                        ),
                                        (
                                            "alt__attr",
                                            wagtail.blocks.CharBlock(
                                                help_text="Opis tekstowy zdjęcia (najczęściej od 5 do 15 słów) mający na celu\n        m.in. umożliwienie przekazu treści osobom słabowidzącym.",
                                                label="Opis alternatywny",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "table",
                                wagtail.contrib.table_block.blocks.TableBlock(
                                    label="Tabela",
                                    required=False,
                                    table_options={
                                        "contextMenu": {
                                            "items": {
                                                "---------": {"name": "---------"},
                                                "col_left": {
                                                    "name": "Wstaw kolumnę z lewej"
                                                },
                                                "col_right": {
                                                    "name": "Wstaw kolumnę z prawej"
                                                },
                                                "redo": {"name": "Powtórz"},
                                                "remove_col": {"name": "Usuń kolumnę"},
                                                "remove_row": {"name": "Usuń wiersz"},
                                                "row_above": {
                                                    "name": "Wstaw wiersz powyżej"
                                                },
                                                "row_below": {
                                                    "name": "Wstaw wiersz poniżej"
                                                },
                                                "undo": {"name": "Cofnij"},
                                            }
                                        },
                                        "renderer": "html",
                                    },
                                    template="streams/table_block.html",
                                ),
                            ),
                            (
                                "docs",
                                wagtail.blocks.ListBlock(
                                    wagtail.documents.blocks.DocumentChooserBlock(),
                                    label="Dokumenty do pobrania",
                                    required=False,
                                    template="streams/document_link_block.html",
                                ),
                            ),
                        ],
                        blank=True,
                        null=True,
                        use_json_field=True,
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="core.customimage",
                        verbose_name="",
                    ),
                ),
                (
                    "year",
                    models.ForeignKey(
                        max_length=10,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="core.schoolyearsnippet",
                        verbose_name="Rok szkolny",
                    ),
                ),
            ],
            options={
                "verbose_name": "Podstrona typu przedmiot-bardzo krótki opis\n                 (np. imię i nazwisko)",
                "verbose_name_plural": "Podstrony typu przedmiot-opis",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="CustomDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                ("file", models.FileField(upload_to="documents", verbose_name="file")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                ("file_size", models.PositiveIntegerField(editable=False, null=True)),
                (
                    "file_hash",
                    models.CharField(blank=True, editable=False, max_length=40),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        default=wagtail.models.collections.get_root_collection_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.collection",
                        verbose_name="collection",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text=None,
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="tags",
                    ),
                ),
                (
                    "uploaded_by_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="uploaded by user",
                    ),
                ),
            ],
            options={
                "verbose_name": "document",
                "verbose_name_plural": "documents",
                "abstract": False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name="ContactPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, null=True, verbose_name="nazwa"),
                ),
                (
                    "address1",
                    models.CharField(
                        max_length=255, null=True, verbose_name="ulica, numer"
                    ),
                ),
                (
                    "address2",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="kod pocztowy, miejscowość",
                    ),
                ),
                (
                    "phone",
                    models.CharField(max_length=60, null=True, verbose_name="telefon"),
                ),
                (
                    "fax",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="fax"
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, null=True, verbose_name="e-mail"),
                ),
                (
                    "additional_info",
                    wagtail.fields.RichTextField(verbose_name="Dodatkowe informacje"),
                ),
                (
                    "alt_attr",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Opis alternatywny",
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="core.customimage",
                        verbose_name="",
                    ),
                ),
            ],
            options={
                "verbose_name": "Kontakt",
                "verbose_name_plural": "Kontakt",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="CustomRendition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("filter_spec", models.CharField(db_index=True, max_length=255)),
                (
                    "file",
                    wagtail.images.models.WagtailImageField(
                        height_field="height",
                        storage=wagtail.images.models.get_rendition_storage,
                        upload_to=wagtail.images.models.get_rendition_upload_to,
                        width_field="width",
                    ),
                ),
                ("width", models.IntegerField(editable=False)),
                ("height", models.IntegerField(editable=False)),
                (
                    "focal_point_key",
                    models.CharField(
                        blank=True, default="", editable=False, max_length=16
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="renditions",
                        to="core.customimage",
                    ),
                ),
            ],
            options={
                "unique_together": {("image", "filter_spec", "focal_point_key")},
            },
            bases=(wagtail.images.models.ImageFileMixin, models.Model),
        ),
    ]
